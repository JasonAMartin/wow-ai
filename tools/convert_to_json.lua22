-- convert_to_json.lua
-- Run this script *outside* of WoW, using a standard Lua interpreter (5.1).

-- Pure Lua JSON encoder (from https://github.com/rxi/json.lua - MIT License)
-- MIT License, Copyright (c) 2020 rxi
local json = {}

function json.encode(value, indent, indent_level)
  indent_level = indent_level or 0
  local indent_str = indent and string.rep("  ", indent_level) or ""
  local next_indent_str = indent and string.rep("  ", indent_level + 1) or ""

  if type(value) == "number" then
    return tostring(value)
  elseif type(value) == "boolean" then
    return tostring(value)
  elseif type(value) == "string" then
    return string.format("%q", value:gsub("\\", "\\\\"):gsub("\n", "\\n"):gsub("\r", "\\r"):gsub("\"", "\\\""))
  elseif type(value) == "table" then
    local s = "{\n"
    local first = true
    for k, v in pairs(value) do
      if not first then
        s = s .. ",\n"
      end
      first = false
      if indent then s = s .. next_indent_str end
      s = s .. json.encode(k, indent, indent_level + 1) .. ": " .. json.encode(v, indent, indent_level + 1)
    end
    if indent then s = s .. "\n" .. indent_str end
    return s .. "}"
  elseif value == nil then
    return "null"
  else
    error("Invalid JSON value: " .. tostring(value))
  end
end
-- End of embedded JSON encoder

-- Get the file path from command-line arguments.
local filePath = arg[1]

if not filePath then
    print("Error: Please provide the path to the WarcraftApiData.lua file as a command-line argument.")
    print("Usage: lua convert_to_json.lua -file \"path/to/WarcraftApiData.lua\"")
    return
end

--Remove the -file text, leaving only file path.
filePath = filePath:gsub("^-file%s*", "")
--Remove quotes.
filePath = filePath:gsub("^\"", ""):gsub("\"$", "")

local file = io.open(filePath, "r")
if not file then
    print("Error: Could not open file at path: " .. filePath)
    return
end

local content = file:read("*all") -- Read entire file
file:close()

-- Use string patterns to extract the Lua table data.  This is more robust
-- than trying to `load` the file directly, as it avoids potential security
-- issues with arbitrary Lua code execution.
local apiDataString = content:match("WarcraftApiDataDB.-{(.-)}")

if not apiDataString then
    print("Error, could not find the data")
    return
end

-- Add brackets to be valid, since we removed it.
apiDataString = "{"..apiDataString

-- Convert API data string to Lua table.
local apiDataTable = assert(load("return " .. apiDataString))

if not apiDataTable then
  print("Error loading data.")
end

-- Remove entries with "(Table)"
local filteredData = {}
for _, entry in ipairs(apiDataTable.apiOutput) do
    if not string.match(entry, "%%(Table%%)$") then
        table.insert(filteredData, entry)
    end
end


local jsonData = json.encode(filteredData, true) -- Use the embedded encoder, pretty print.

if jsonData then
    local outputFilePath = "wow_api.json"

    local outputFile = io.open(outputFilePath, "w")
    if outputFile then
        outputFile:write(jsonData)
        outputFile:close()
        print("API data extracted to " .. outputFilePath)
    else
        print("Error: Could not create output file at " .. outputFilePath)
    end
else
    print("Error: Could not convert to json.")
end
