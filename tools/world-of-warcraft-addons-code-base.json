{
  "DumpText": {
    "toc": "// ***** Start of DumpText.toc *****\n## Interface: 110000\n## Title: DumpText\n## Notes: Dumps Lua values to a scrollable window\nDumpText.lua\n\n// ***** End of DumpText.toc *****\n",
    "lua": "-- ***** Start of DumpText.lua *****\n-- DumpText.lua\nlocal addonName = \"DumpText\"\nlocal frame = CreateFrame(\"Frame\", \"DumpFrame\", UIParent, \"BasicFrameTemplateWithInset\")\nframe:SetSize(600, 400)\nframe:SetPoint(\"CENTER\")\nframe:Hide()\n\nlocal scroll = CreateFrame(\"ScrollFrame\", \"DumpScroll\", frame, \"UIPanelScrollFrameTemplate\")\nscroll:SetPoint(\"TOPLEFT\", 8, -30)\nscroll:SetPoint(\"BOTTOMRIGHT\", -30, 8)\n\nlocal editBox = CreateFrame(\"EditBox\", \"DumpEditBox\", scroll)\neditBox:SetMultiLine(true)\neditBox:SetFontObject(ChatFontNormal)\neditBox:SetWidth(560)\neditBox:SetAutoFocus(false)\nscroll:SetScrollChild(editBox)\n\n-- Simple recursive dump with cycle detection and depth limit\nlocal function SimpleDump(value, indent, seen, depth)\n    indent = indent or \"\"\n    seen = seen or {}\n    depth = depth or 0\n    if depth > 10 then -- Limit depth to prevent stack overflow\n        return indent .. \"<depth limit reached>\"\n    end\n    if type(value) == \"table\" then\n        if seen[value] then\n            return indent .. \"<cycle detected: \" .. tostring(value) .. \">\"\n        end\n        seen[value] = true\n        local str = \"{\\n\"\n        for k, v in pairs(value) do\n            str = str .. indent .. \"  [\" .. tostring(k) .. \"] = \" .. SimpleDump(v, indent .. \"  \", seen, depth + 1) .. \",\\n\"\n        end\n        return str .. indent .. \"}\"\n    elseif type(value) == \"function\" then\n        return indent .. \"<function>\"\n    elseif type(value) == \"userdata\" then\n        return indent .. \"<userdata: \" .. tostring(value) .. \">\"\n    else\n        return indent .. tostring(value)\n    end\nend\n\n-- Function to dump to the window\nfunction DumpToWindow(value)\n    if not frame:IsShown() then frame:Show() end\n    local text = SimpleDump(value)\n    editBox:SetText(text)\nend\n\n-- Slash command\nSLASH_DUMPTEXT1 = \"/dumptext\"\nSlashCmdList[\"DUMPTEXT\"] = function(msg)\n    local value = loadstring(\"return \" .. msg)()\n    if value then\n        DumpToWindow(value)\n    else\n        print(\"Error: Could not evaluate \" .. msg)\n    end\nend\n\n-- ***** End of DumpText.lua *****\n"
  },
  "TameCheck": {
    "toc": "// ***** Start of TameCheck.toc *****\n## Interface: 110007\n## Title: TameCheck\n## Notes: Checks if your focus target is tameable\nTameCheck.lua\n\n\n// ***** End of TameCheck.toc *****\n",
    "lua": "-- ***** Start of TameCheck.lua *****\n-- Create a frame to handle events\nlocal frame = CreateFrame(\"Frame\", \"TameCheck\", UIParent)\n\n-- Default settings\nlocal defaults = {\n    searchTarget = \"Soaring Plainshawk\",\n    alertSound = 567505 -- Default to \"how are you\" voice\n}\n\n-- Saved variables\nTameCheckDB = TameCheckDB or CopyTable(defaults)\n\n-- Check if the target is tameable\nlocal function IsTameable(unit)\n    if not UnitExists(unit) then return false end\n    if UnitPlayerControlled(unit) then return false end\n    \n    local creatureType = UnitCreatureType(unit)\n    if creatureType ~= \"Beast\" then return false end\n    \n    local classification = UnitClassification(unit)\n    if classification == \"worldboss\" then return false end\n    \n    local playerLevel = UnitLevel(\"player\")\n    local targetLevel = UnitLevel(unit)\n    if targetLevel > playerLevel then return false end\n    \n    local spec = GetSpecialization()\n    local isBM = spec and GetSpecializationInfo(spec) == 253\n    return true\nend\n\n-- Update the tooltip with tameable status\nlocal function UpdateTooltip(tooltip)\n    local unit = \"target\"\n    if UnitExists(unit) then\n        local tameable = IsTameable(unit)\n        local line = tameable and \"|cff00ff00Tameable: Yes|r\" or \"|cffff0000Tameable: No|r\"\n        tooltip:AddLine(line)\n    end\nend\n\n-- Play the alert sound using ID\nlocal function PlayAlertSound(soundID)\n    local success = PlaySoundFile(soundID, \"Master\")\n    return success\nend\n\n-- Debug sound playback attempts\nlocal function DebugSoundPlay(soundID, success)\n    if success then\n        print(\"Sound played successfully: ID \" .. soundID)\n    else\n        print(\"Failed to play sound: ID \" .. soundID .. \" - Check ID or volume settings\")\n    end\nend\n\n-- Scan nearby enemies for the target tame\nlocal function ScanForTame()\n    local searchTarget = TameCheckDB.searchTarget:lower()\n    if searchTarget == \"\" then return end\n    \n    for i = 1, 40 do\n        local unit = \"nameplate\" .. i\n        if UnitExists(unit) and not UnitIsPlayer(unit) then\n            local name = UnitName(unit):lower()\n            if name == searchTarget and IsTameable(unit) then\n                local soundSuccess = PlayAlertSound(TameCheckDB.alertSound)\n                DebugSoundPlay(TameCheckDB.alertSound, soundSuccess)\n                if not soundSuccess then\n                    local fallbackID = 567458 -- AuctionWindowOpen ID\n                    local fallbackSuccess = PlayAlertSound(fallbackID)\n                    DebugSoundPlay(fallbackID, fallbackSuccess)\n                end\n                print(\"TAME FOUND: \" .. UnitName(unit) .. \"!\")\n                return\n            end\n        end\n    end\nend\n\n-- Create the options panel edit box\nlocal function CreateEditBox(parent)\n    local editBox = CreateFrame(\"EditBox\", nil, parent, \"InputBoxTemplate\")\n    editBox:SetPoint(\"TOPLEFT\", 10, -40)\n    editBox:SetSize(200, 20)\n    editBox:SetAutoFocus(false)\n    editBox:SetText(TameCheckDB.searchTarget)\n    editBox:SetScript(\"OnEnterPressed\", function(self)\n        TameCheckDB.searchTarget = self:GetText()\n        self:ClearFocus()\n    end)\n    editBox:SetScript(\"OnEscapePressed\", function(self)\n        self:SetText(TameCheckDB.searchTarget)\n        self:ClearFocus()\n    end)\n    local editLabel = parent:CreateFontString(nil, \"OVERLAY\", \"GameFontHighlight\")\n    editLabel:SetPoint(\"BOTTOMLEFT\", editBox, \"TOPLEFT\", 0, 2)\n    editLabel:SetText(\"Search Target (e.g., Soaring Plainshawk)\")\n    return editBox\nend\n\n-- Create the sound dropdown with sound IDs\nlocal function CreateSoundDropdown(parent, editBox)\n    local soundDropdown = CreateFrame(\"Frame\", \"TameCheckSoundDropdown\", parent, \"UIDropDownMenuTemplate\")\n    soundDropdown:SetPoint(\"TOPLEFT\", editBox, \"BOTTOMLEFT\", -15, -10)\n    local soundOptions = {\n        { text = \"Gold (Coin Clink)\", value = 567436 },\n        { text = \"Discovery (Quest Ding)\", value = 567482 },\n        { text = \"Exhilaration (Raid Alert)\", value = 567514 },\n        { text = \"Woo Hooo (Voice)\", value = 552144 },\n        { text = \"Found You (Ping)\", value = 567524 },\n        { text = \"Yay (Bell Toll)\", value = 567458 },\n        { text = \"Not Junk Treasure (Chime)\", value = 567467 },\n        { text = \"Treasure (Loot Open)\", value = 567475 },\n        { text = \"Chest Found (Creak)\", value = 567486 },\n        { text = \"Mouths to Feed (Laugh)\", value = 552148 },\n        { text = \"Coins Drop\", value = 567439 },\n        { text = \"Cheer (Level Up)\", value = 567500 },\n        { text = \"Alert (Invite)\", value = 567491 },\n        { text = \"Shout (Male Woo)\", value = 552152 },\n        { text = \"Ding (Repair)\", value = 567496 },\n        { text = \"Victory (Horde)\", value = 567510 },\n        { text = \"Loot (Big Coin)\", value = 567472 },\n        { text = \"Creak (Quest Done)\", value = 567483 },\n        { text = \"Taunt (Female)\", value = 552146 },\n        { text = \"Fanfare (Flag Capture)\", value = 567505 },\n    }\n    UIDropDownMenu_Initialize(soundDropdown, function(self)\n        for _, option in ipairs(soundOptions) do\n            local info = UIDropDownMenu_CreateInfo()\n            info.text = option.text\n            info.value = option.value\n            info.func = function(self)\n                TameCheckDB.alertSound = self.value\n                UIDropDownMenu_SetText(soundDropdown, option.text)\n                local success = PlayAlertSound(self.value)\n                DebugSoundPlay(self.value, success)\n            end\n            UIDropDownMenu_AddButton(info)\n        end\n    end)\n    UIDropDownMenu_SetWidth(soundDropdown, 150)\n    UIDropDownMenu_SetText(soundDropdown, \"Select Sound\")\n    for _, option in ipairs(soundOptions) do\n        if option.value == TameCheckDB.alertSound then\n            UIDropDownMenu_SetText(soundDropdown, option.text)\n            break\n        end\n    end\n    local soundLabel = parent:CreateFontString(nil, \"OVERLAY\", \"GameFontHighlight\")\n    soundLabel:SetPoint(\"BOTTOMLEFT\", soundDropdown, \"TOPLEFT\", 16, 2)\n    soundLabel:SetText(\"Alert Sound\")\nend\n\n-- Setup the options panel\nlocal function InitializeOptions()\n    local panel = CreateFrame(\"Frame\")\n    panel.name = \"TameCheck\"\n    local title = panel:CreateFontString(nil, \"OVERLAY\", \"GameFontNormalLarge\")\n    title:SetPoint(\"TOPLEFT\", 10, -10)\n    title:SetText(\"TameCheck Options\")\n    local editBox = CreateEditBox(panel)\n    CreateSoundDropdown(panel, editBox)\n    local category = Settings.RegisterCanvasLayoutCategory(panel, \"TameCheck\")\n    Settings.RegisterAddOnCategory(category)\nend\n\n-- Handle events\nlocal function HandleEvents(self, event, ...)\n    print(\"Event: \" .. event)\n    if event == \"PLAYER_TARGET_CHANGED\" then\n        if UnitExists(\"target\") then\n            GameTooltip:SetUnit(\"target\")\n        end\n    elseif event == \"PLAYER_LOGIN\" then\n        InitializeOptions()\n        if UnitExists(\"target\") then\n            GameTooltip:SetUnit(\"target\")\n        end\n    end\nend\n\n-- Periodic scanning\nlocal function ScanPeriodically(self, elapsed)\n    local lastScan = self.lastScan or 0\n    lastScan = lastScan + elapsed\n    if lastScan >= 2 then\n        ScanForTame()\n        lastScan = 0\n    end\n    self.lastScan = lastScan\nend\n\n-- Initialize the addon\nhooksecurefunc(GameTooltip, \"SetUnit\", UpdateTooltip)\nframe:RegisterEvent(\"PLAYER_TARGET_CHANGED\")\nframe:RegisterEvent(\"PLAYER_LOGIN\")\nframe:SetScript(\"OnEvent\", HandleEvents)\nframe:SetScript(\"OnUpdate\", ScanPeriodically)\n-- ***** End of TameCheck.lua *****\n"
  }
}